// Code generated by MockGen. DO NOT EDIT.
// Source: youtube-curator-v2/internal/store (interfaces: Store)
//
// Generated by this command:
//
//	mockgen -destination=store_mock.go -package=store . Store
//

// Package store is a generated GoMock package.
package store

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddChannel mocks base method.
func (m *MockStore) AddChannel(channel Channel) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChannel", channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChannel indicates an expected call of AddChannel.
func (mr *MockStoreMockRecorder) AddChannel(channel any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChannel", reflect.TypeOf((*MockStore)(nil).AddChannel), channel)
}

// Close mocks base method.
func (m *MockStore) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStoreMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStore)(nil).Close))
}

// GetChannels mocks base method.
func (m *MockStore) GetChannels() ([]Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChannels")
	ret0, _ := ret[0].([]Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChannels indicates an expected call of GetChannels.
func (mr *MockStoreMockRecorder) GetChannels() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChannels", reflect.TypeOf((*MockStore)(nil).GetChannels))
}

// GetCheckInterval mocks base method.
func (m *MockStore) GetCheckInterval() (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckInterval")
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCheckInterval indicates an expected call of GetCheckInterval.
func (mr *MockStoreMockRecorder) GetCheckInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckInterval", reflect.TypeOf((*MockStore)(nil).GetCheckInterval))
}

// GetLLMConfig mocks base method.
func (m *MockStore) GetLLMConfig() (*LLMConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLLMConfig")
	ret0, _ := ret[0].(*LLMConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLLMConfig indicates an expected call of GetLLMConfig.
func (mr *MockStoreMockRecorder) GetLLMConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLLMConfig", reflect.TypeOf((*MockStore)(nil).GetLLMConfig))
}

// GetLastCheckedTimestamp mocks base method.
func (m *MockStore) GetLastCheckedTimestamp(channelID string) (time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCheckedTimestamp", channelID)
	ret0, _ := ret[0].(time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCheckedTimestamp indicates an expected call of GetLastCheckedTimestamp.
func (mr *MockStoreMockRecorder) GetLastCheckedTimestamp(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCheckedTimestamp", reflect.TypeOf((*MockStore)(nil).GetLastCheckedTimestamp), channelID)
}

// GetLastCheckedVideoID mocks base method.
func (m *MockStore) GetLastCheckedVideoID(channelID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCheckedVideoID", channelID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastCheckedVideoID indicates an expected call of GetLastCheckedVideoID.
func (mr *MockStoreMockRecorder) GetLastCheckedVideoID(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCheckedVideoID", reflect.TypeOf((*MockStore)(nil).GetLastCheckedVideoID), channelID)
}

// GetSMTPConfig mocks base method.
func (m *MockStore) GetSMTPConfig() (*SMTPConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSMTPConfig")
	ret0, _ := ret[0].(*SMTPConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSMTPConfig indicates an expected call of GetSMTPConfig.
func (mr *MockStoreMockRecorder) GetSMTPConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSMTPConfig", reflect.TypeOf((*MockStore)(nil).GetSMTPConfig))
}

// RemoveChannel mocks base method.
func (m *MockStore) RemoveChannel(channelID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveChannel", channelID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveChannel indicates an expected call of RemoveChannel.
func (mr *MockStoreMockRecorder) RemoveChannel(channelID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveChannel", reflect.TypeOf((*MockStore)(nil).RemoveChannel), channelID)
}

// SetCheckInterval mocks base method.
func (m *MockStore) SetCheckInterval(interval time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCheckInterval", interval)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCheckInterval indicates an expected call of SetCheckInterval.
func (mr *MockStoreMockRecorder) SetCheckInterval(interval any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCheckInterval", reflect.TypeOf((*MockStore)(nil).SetCheckInterval), interval)
}

// SetLLMConfig mocks base method.
func (m *MockStore) SetLLMConfig(config *LLMConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLLMConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLLMConfig indicates an expected call of SetLLMConfig.
func (mr *MockStoreMockRecorder) SetLLMConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLLMConfig", reflect.TypeOf((*MockStore)(nil).SetLLMConfig), config)
}

// SetLastCheckedTimestamp mocks base method.
func (m *MockStore) SetLastCheckedTimestamp(channelID string, timestamp time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastCheckedTimestamp", channelID, timestamp)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastCheckedTimestamp indicates an expected call of SetLastCheckedTimestamp.
func (mr *MockStoreMockRecorder) SetLastCheckedTimestamp(channelID, timestamp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastCheckedTimestamp", reflect.TypeOf((*MockStore)(nil).SetLastCheckedTimestamp), channelID, timestamp)
}

// SetLastCheckedVideoID mocks base method.
func (m *MockStore) SetLastCheckedVideoID(channelID, videoID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLastCheckedVideoID", channelID, videoID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLastCheckedVideoID indicates an expected call of SetLastCheckedVideoID.
func (mr *MockStoreMockRecorder) SetLastCheckedVideoID(channelID, videoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLastCheckedVideoID", reflect.TypeOf((*MockStore)(nil).SetLastCheckedVideoID), channelID, videoID)
}

// SetSMTPConfig mocks base method.
func (m *MockStore) SetSMTPConfig(config *SMTPConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSMTPConfig", config)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSMTPConfig indicates an expected call of SetSMTPConfig.
func (mr *MockStoreMockRecorder) SetSMTPConfig(config any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSMTPConfig", reflect.TypeOf((*MockStore)(nil).SetSMTPConfig), config)
}
