name: Run Tests

on:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]



jobs:
  test:
    name: Run Go Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23.7'
        cache: true

    - name: Get dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./... 
  
  test-frontend:
    name: Run Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run: 
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm install

    - name: Run lint
      run: npm run lint

    - name: Run frontend tests
      run: npm run test:ci

  ui-screenshots:
    name: UI Screenshots (PR only)
    runs-on: ubuntu-latest
    # Only run on pull requests, not on pushes to main
    if: github.event_name == 'pull_request'
    defaults:
      run: 
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: './frontend/package-lock.json'

    - name: Install dependencies
      run: npm install

    - name: Install Playwright browsers
      run: npx playwright install chromium --with-deps

    - name: Run UI screenshot tests
      run: npm run test:screenshots
      env:
        # Visual Regression Mode (default): Tests fail if UI changes vs baselines
        # Screenshot Generation Mode: Set to "true" to generate screenshots without comparison
        # This is useful during rapid UI development or for pure PR review artifacts
        DISABLE_VISUAL_REGRESSION: false
        # Disable development tools in production-like environment for clean screenshots
        NEXT_PUBLIC_DISABLE_DEVTOOLS: true

    - name: Upload screenshots as artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: ui-screenshots
        path: |
          frontend/test-results/
          frontend/playwright-report/
        retention-days: 14

  # This job ensures that all critical tests (backend + frontend) pass
  # before allowing Docker images to be built
  all-tests-passed:
    name: All Tests Passed
    runs-on: ubuntu-latest
    needs: [test, test-frontend]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "Backend tests failed: ${{ needs.test.result }}"
          exit 1
        fi
        if [[ "${{ needs.test-frontend.result }}" != "success" ]]; then
          echo "Frontend tests failed: ${{ needs.test-frontend.result }}"
          exit 1
        fi
        echo "All critical tests passed successfully!"
